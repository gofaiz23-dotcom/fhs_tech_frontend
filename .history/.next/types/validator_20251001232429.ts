// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ../../app/components/appstore/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/components/appstore">> = Specific
  const handler = {} as typeof import("../../app/components/appstore/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/inventory/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/inventory">> = Specific
  const handler = {} as typeof import("../../app/inventory/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/listings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/listings">> = Specific
  const handler = {} as typeof import("../../app/listings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../app/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/orders/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/orders">> = Specific
  const handler = {} as typeof import("../../app/orders/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/products/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/products">> = Specific
  const handler = {} as typeof import("../../app/products/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/reports/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/reports">> = Specific
  const handler = {} as typeof import("../../app/reports/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/access-control/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/access-control">> = Specific
  const handler = {} as typeof import("../../app/settings/access-control/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/account/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/account">> = Specific
  const handler = {} as typeof import("../../app/settings/account/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/api/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/api">> = Specific
  const handler = {} as typeof import("../../app/settings/api/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/change-password/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/change-password">> = Specific
  const handler = {} as typeof import("../../app/settings/change-password/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/channels/[provider]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/channels/[provider]">> = Specific
  const handler = {} as typeof import("../../app/settings/channels/[provider]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/channels/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/channels">> = Specific
  const handler = {} as typeof import("../../app/settings/channels/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/channels/your/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/channels/your">> = Specific
  const handler = {} as typeof import("../../app/settings/channels/your/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/manage-users/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/manage-users">> = Specific
  const handler = {} as typeof import("../../app/settings/manage-users/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/users/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/users">> = Specific
  const handler = {} as typeof import("../../app/settings/users/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/settings/warehouses/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/warehouses">> = Specific
  const handler = {} as typeof import("../../app/settings/warehouses/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}







// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
